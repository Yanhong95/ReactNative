{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nvar _NativeModules$UIMana = NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\n\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.getConstants().genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  validProps.forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) == null ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref2) {\n  var name = _ref2.name,\n      _ref2$allowedProps = _ref2.allowedProps,\n      allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,\n      _ref2$config = _ref2.config,\n      config = _ref2$config === void 0 ? {} : _ref2$config,\n      transformProps = _ref2.transformProps,\n      _ref2$customNativePro = _ref2.customNativeProps,\n      customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n      _this.updateEnqueued = null;\n\n      _this.onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          _this.props.onGestureEvent == null ? void 0 : _this.props.onGestureEvent(event);\n        } else {\n          _this.props.onGestureHandlerEvent == null ? void 0 : _this.props.onGestureHandlerEvent(event);\n        }\n      };\n\n      _this.onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          _this.props.onHandlerStateChange == null ? void 0 : _this.props.onHandlerStateChange(event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange == null ? void 0 : _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n\n      _this.refHandler = function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      };\n\n      _this.createGestureHandler = function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      };\n\n      _this.attachGestureHandler = function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag);\n        }\n      };\n\n      _this.updateGestureHandler = function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      };\n\n      _this.handlerTag = handlerTag++;\n      _this.config = {};\n      _this.propsRef = React.createRef();\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props = this.props,\n            onGestureEvent = _this$props.onGestureEvent,\n            onGestureHandlerEvent = _this$props.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props2 = this.props,\n            onHandlerStateChange = _this$props2.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  Handler.displayName = name;\n  return Handler;\n}","map":{"version":3,"sources":["/Users/CYH/JS/react_native/Shop APP/node_modules/react-native-gesture-handler/src/handlers/createHandler.ts"],"names":["React","deepEqual","RNGestureHandlerModule","State","findNodeHandle","node","Platform","OS","findNodeHandleRN","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","allowedProps","config","transformProps","customNativeProps","Handler","updateEnqueued","event","nativeEvent","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","refHandler","viewNode","child","Children","only","children","ref","createGestureHandler","newConfig","attachGestureHandler","newViewTag","viewTag","propsRef","updateGestureHandler","createRef","id","Error","setImmediate","update","dropGestureHandler","clearImmediate","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAQA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,sBAAP;AAEA,SAASC,KAAT;;AASA,SAASC,cAAT,CACEC,IADF,EAEyE;AACvE,MAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B,OAAOF,IAAP;AAC3B,SAAOG,gBAAgB,CAACH,IAAD,CAAvB;AACD;;4BAE0BI,a,CAAnBC,S;IAAAA,S,sCAAY,E;AAEpB,IAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,qBAAqB,EAAE;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GADI;AAE3BC,EAAAA,2BAA2B,EAAE;AAC3BD,IAAAA,gBAAgB,EAAE;AADS;AAFF,CAA7B;AAWAH,SAAS,CAACK,uBAAV,mCACKL,SAAS,CAACK,uBADf,GAEKJ,oBAFL;;AAOA,IAAID,SAAS,CAACM,YAAd,EAA4B;AAC1BN,EAAAA,SAAS,CAACM,YAAV,GAAyBD,uBAAzB,mCACKL,SAAS,CAACM,YAAV,GAAyBD,uBAD9B,GAEKJ,oBAFL;AAID;;4BAUGD,S,CANFO,c;IAAgBC,iB,sCAAoB,YAAM,CAEzC,C;4BAICR,S,CAHFS,gB;IAAkBC,mB,sCAAsB,YAAM,CAE7C,C;;AAEHV,SAAS,CAACO,cAAV,GAA2B,UAACI,GAAD,EAAcC,oBAAd,EAAgD;AACzEpB,EAAAA,sBAAsB,CAACqB,oBAAvB,CAA4CF,GAA5C,EAAiDC,oBAAjD;AACAJ,EAAAA,iBAAiB,CAACG,GAAD,EAAMC,oBAAN,CAAjB;AACD,CAHD;;AAIAZ,SAAS,CAACS,gBAAV,GAA6B,YAAM;AACjCjB,EAAAA,sBAAsB,CAACsB,sBAAvB;AACAJ,EAAAA,mBAAmB;AACpB,CAHD;;AAKA,IAAIK,UAAU,GAAG,CAAjB;AACA,IAAMC,cAAsC,GAAG,EAA/C;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAAuCC,IAAvC,EAAqD;AAGnD,SACED,KAAK,KAAKE,SAAV,KACCF,KAAK,KAAKG,MAAM,CAACH,KAAD,CAAhB,IACC,EAAE,gBAAiBA,KAAnB,CAFF,KAGAC,IAAI,KAAK,sBAHT,IAIAA,IAAI,KAAK,gBALX;AAOD;;AAED,SAASG,YAAT,CACEC,KADF,EAEEC,UAFF,EAIE;AAAA,MADAC,QACA,uEADoC,EACpC;;AACA,MAAMC,GAAG,qBAAQD,QAAR,CAAT;;AACAD,EAAAA,UAAU,CAACG,OAAX,CAAmB,UAACC,GAAD,EAAS;AAC1B,QAAMC,KAAK,GAAGN,KAAK,CAACK,GAAD,CAAnB;;AACA,QAAIX,aAAa,CAACY,KAAD,EAAQD,GAAR,CAAjB,EAA+B;AAC7B,UAAIC,MAAK,GAAGN,KAAK,CAACK,GAAD,CAAjB;;AACA,UAAIA,GAAG,KAAK,sBAAR,IAAkCA,GAAG,KAAK,SAA9C,EAAyD;AACvDC,QAAAA,MAAK,GAAGC,wBAAwB,CAACP,KAAK,CAACK,GAAD,CAAN,CAAhC;AACD,OAFD,MAEO,IAAIA,GAAG,KAAK,SAAZ,EAAuB;AAC5B,YAAI,OAAOC,MAAP,KAAiB,QAArB,EAA+B;AAC7BA,UAAAA,MAAK,GAAG;AAAEE,YAAAA,GAAG,EAAEF,MAAP;AAAcG,YAAAA,IAAI,EAAEH,MAApB;AAA2BI,YAAAA,MAAM,EAAEJ,MAAnC;AAA0CK,YAAAA,KAAK,EAAEL;AAAjD,WAAR;AACD;AACF;;AACDH,MAAAA,GAAG,CAACE,GAAD,CAAH,GAAWC,MAAX;AACD;AACF,GAbD;AAcA,SAAOH,GAAP;AACD;;AAED,SAASI,wBAAT,CAAkCK,UAAlC,EAAmD;AACjD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC9BA,IAAAA,UAAU,GAAG,CAACA,UAAD,CAAb;AACD;;AAED,MAAIvC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOsC,UAAU,CACdG,GADI,CACA;AAAA,UAAGC,OAAH,QAAGA,OAAH;AAAA,aAAmCA,OAAnC;AAAA,KADA,EAEJC,MAFI,CAEG,UAACC,MAAD;AAAA,aAAiBA,MAAjB;AAAA,KAFH,CAAP;AAGD;;AAED,SAAON,UAAU,CACdG,GADI,CAEH,UAACI,SAAD;AAAA;;AAAA,WACE1B,cAAc,CAAC0B,SAAD,CAAd,2BAA6BA,SAAS,CAACH,OAAvC,qBAA6B,mBAAmBxB,UAAhD,KAA8D,CAAC,CADjE;AAAA,GAFG,EAKJyB,MALI,CAKG,UAACzB,UAAD;AAAA,WAAwBA,UAAU,GAAG,CAArC;AAAA,GALH,CAAP;AAMD;;AAKD,SAAS4B,iBAAT,CACEpB,KADF,EAEE;AAEA,MAAMqB,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAuB;AACrC,QAAI,CAACT,KAAK,CAACC,OAAN,CAAcQ,IAAd,CAAL,EAA0B;AACxB,aAAOA,IAAI,IAAIA,IAAI,CAACN,OAAL,KAAiB,IAAhC;AACD;;AACD,WAAOM,IAAI,CAACC,IAAL,CAAU,UAACC,CAAD;AAAA,aAAOA,CAAC,IAAIA,CAAC,CAACR,OAAF,KAAc,IAA1B;AAAA,KAAV,CAAP;AACD,GALD;;AAMA,SAAOK,OAAO,CAACrB,KAAK,CAAC,sBAAD,CAAN,CAAP,IAA0CqB,OAAO,CAACrB,KAAK,CAAC,SAAD,CAAN,CAAxD;AACD;;AAED,IAAMyB,mBAAmB,qEACtBvD,KAAK,CAACwD,YADgB,EACD7B,SADC,yCAEtB3B,KAAK,CAACyD,KAFgB,EAER,SAFQ,yCAGtBzD,KAAK,CAAC0D,MAHgB,EAGP,UAHO,yCAItB1D,KAAK,CAAC2D,SAJgB,EAIJ,aAJI,yCAKtB3D,KAAK,CAAC4D,MALgB,EAKP,aALO,yCAMtB5D,KAAK,CAAC6D,GANgB,EAMV,SANU,wBAAzB;AA0BA,eAAe,SAASC,aAAT,QAS6D;AAAA,MAL1EpC,IAK0E,SAL1EA,IAK0E;AAAA,iCAJ1EqC,YAI0E;AAAA,MAJ1EA,YAI0E,mCAJ3D,EAI2D;AAAA,2BAH1EC,MAG0E;AAAA,MAH1EA,MAG0E,6BAHjE,EAGiE;AAAA,MAF1EC,cAE0E,SAF1EA,cAE0E;AAAA,oCAD1EC,iBAC0E;AAAA,MAD1EA,iBAC0E,sCADtD,EACsD;;AAAA,MACpEC,OADoE;AAAA;;AAAA;;AAWxE,qBAAYrC,KAAZ,EAA8C;AAAA;;AAAA;;AAC5C,gCAAMA,KAAN;AAD4C,YAFtCsC,cAEsC,GAFmB,IAEnB;;AAAA,YA4DtC3D,qBA5DsC,GA4Dd,UAAC4D,KAAD,EAA4B;AAC1D,YAAIA,KAAK,CAACC,WAAN,CAAkBhD,UAAlB,KAAiC,MAAKA,UAA1C,EAAsD;AACpD,gBAAKQ,KAAL,CAAWyC,cAAX,0BAAKzC,KAAL,CAAWyC,cAAX,CAA4BF,KAA5B;AACD,SAFD,MAEO;AACL,gBAAKvC,KAAL,CAAWrB,qBAAX,0BAAKqB,KAAL,CAAWrB,qBAAX,CAAmC4D,KAAnC;AACD;AACF,OAlE6C;;AAAA,YAqEtC1D,2BArEsC,GAqER,UACpC0D,KADoC,EAEjC;AACH,YAAIA,KAAK,CAACC,WAAN,CAAkBhD,UAAlB,KAAiC,MAAKA,UAA1C,EAAsD;AACpD,gBAAKQ,KAAL,CAAW0C,oBAAX,0BAAK1C,KAAL,CAAW0C,oBAAX,CAAkCH,KAAlC;AAEA,cAAMI,KAA4B,GAAGJ,KAAK,CAACC,WAAN,CAAkBG,KAAvD;AACA,cAAMC,cAAc,GAAGnB,mBAAmB,CAACkB,KAAD,CAA1C;AACA,cAAME,YAAY,GAAGD,cAAc,IAAI,MAAK5C,KAAL,CAAW4C,cAAX,CAAvC;;AACA,cAAIC,YAAY,IAAI,OAAOA,YAAP,KAAwB,UAA5C,EAAwD;AACtDA,YAAAA,YAAY,CAACN,KAAD,CAAZ;AACD;AACF,SATD,MASO;AACL,gBAAKvC,KAAL,CAAWnB,2BAAX,0BAAKmB,KAAL,CAAWnB,2BAAX,CAAyC0D,KAAzC;AACD;AACF,OApF6C;;AAAA,YAsFtCO,UAtFsC,GAsFzB,UAAC1E,IAAD,EAAe;AAClC,cAAK2E,QAAL,GAAgB3E,IAAhB;AAEA,YAAM4E,KAAK,GAAGjF,KAAK,CAACkF,QAAN,CAAeC,IAAf,CAAoB,MAAKlD,KAAL,CAAWmD,QAA/B,CAAd;AAHkC,YAK1BC,GAL0B,GAKbJ,KALa,CAK1BI,GAL0B;;AAMlC,YAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,YAAAA,GAAG,CAAChF,IAAD,CAAH;AACD,WAFD,MAEO;AACLgF,YAAAA,GAAG,CAACpC,OAAJ,GAAc5C,IAAd;AACD;AACF;AACF,OAnG6C;;AAAA,YAqGtCiF,oBArGsC,GAqGf,UAC7BC,SAD6B,EAE1B;AACH,cAAKpB,MAAL,GAAcoB,SAAd;AAEArF,QAAAA,sBAAsB,CAACoF,oBAAvB,CACEzD,IADF,EAEE,MAAKJ,UAFP,EAGE8D,SAHF;AAKD,OA/G6C;;AAAA,YAiHtCC,oBAjHsC,GAiHf,UAACC,UAAD,EAAwB;AACrD,cAAKC,OAAL,GAAeD,UAAf;;AAEA,YAAInF,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAExBL,UAAAA,sBAAsB,CAACsF,oBAAxB,CACE,MAAK/D,UADP,EAEEgE,UAFF,EAGE,MAAKE,QAHP;AAKD,SAPD,MAOO;AACLzF,UAAAA,sBAAsB,CAACsF,oBAAvB,CACE,MAAK/D,UADP,EAEEgE,UAFF;AAID;AACF,OAjI6C;;AAAA,YAmItCG,oBAnIsC,GAmIf,UAC7BL,SAD6B,EAE1B;AACH,cAAKpB,MAAL,GAAcoB,SAAd;AAEArF,QAAAA,sBAAsB,CAAC0F,oBAAvB,CAA4C,MAAKnE,UAAjD,EAA6D8D,SAA7D;AACD,OAzI6C;;AAE5C,YAAK9D,UAAL,GAAkBA,UAAU,EAA5B;AACA,YAAK0C,MAAL,GAAc,EAAd;AACA,YAAKwB,QAAL,GAAgB3F,KAAK,CAAC6F,SAAN,EAAhB;;AACA,UAAI5D,KAAK,CAAC6D,EAAV,EAAc;AACZ,YAAIpE,cAAc,CAACO,KAAK,CAAC6D,EAAP,CAAd,KAA6BhE,SAAjC,EAA4C;AAC1C,gBAAM,IAAIiE,KAAJ,wBAA8B9D,KAAK,CAAC6D,EAApC,2BAAN;AACD;;AACDpE,QAAAA,cAAc,CAACO,KAAK,CAAC6D,EAAP,CAAd,GAA2B,MAAKrE,UAAhC;AACD;;AAV2C;AAW7C;;AAtBuE;AAAA;AAAA,aAwBxE,6BAAoB;AAAA;;AAClB,YAAMQ,KAAsB,GAAG,KAAKA,KAApC;;AACA,YAAIoB,iBAAiB,CAACpB,KAAD,CAArB,EAA8B;AAO5B,eAAKsC,cAAL,GAAsByB,YAAY,CAAC,YAAM;AACvC,YAAA,MAAI,CAACzB,cAAL,GAAsB,IAAtB;;AACA,YAAA,MAAI,CAAC0B,MAAL;AACD,WAHiC,CAAlC;AAID;;AAED,aAAKX,oBAAL,CACEtD,YAAY,CACVoC,cAAc,GAAGA,cAAc,CAAC,KAAKnC,KAAN,CAAjB,GAAgC,KAAKA,KADzC,+BAENiC,YAFM,sBAEWG,iBAFX,IAGVF,MAHU,CADd;AAQA,aAAKqB,oBAAL,CAA0BpF,cAAc,CAAC,KAAK4E,QAAN,CAAxC;AACD;AAhDuE;AAAA;AAAA,aAkDxE,8BAAqB;AACnB,YAAMU,OAAO,GAAGtF,cAAc,CAAC,KAAK4E,QAAN,CAA9B;;AACA,YAAI,KAAKU,OAAL,KAAiBA,OAArB,EAA8B;AAC5B,eAAKF,oBAAL,CAA0BE,OAA1B;AACD;;AACD,aAAKO,MAAL;AACD;AAxDuE;AAAA;AAAA,aA0DxE,gCAAuB;AACrB/F,QAAAA,sBAAsB,CAACgG,kBAAvB,CAA0C,KAAKzE,UAA/C;;AACA,YAAI,KAAK8C,cAAT,EAAyB;AACvB4B,UAAAA,cAAc,CAAC,KAAK5B,cAAN,CAAd;AACD;;AAED,YAAMnB,SAA6B,GAAG,KAAKnB,KAAL,CAAW6D,EAAjD;;AACA,YAAI1C,SAAJ,EAAe;AAEb,iBAAO1B,cAAc,CAAC0B,SAAD,CAArB;AACD;AACF;AArEuE;AAAA;AAAA,aAsJxE,kBAAiB;AACf,YAAMmC,SAAS,GAAGvD,YAAY,CAC5BoC,cAAc,GAAGA,cAAc,CAAC,KAAKnC,KAAN,CAAjB,GAAgC,KAAKA,KADvB,+BAExBiC,YAFwB,sBAEPG,iBAFO,IAG5BF,MAH4B,CAA9B;;AAKA,YAAI,CAAClE,SAAS,CAAC,KAAKkE,MAAN,EAAcoB,SAAd,CAAd,EAAwC;AACtC,eAAKK,oBAAL,CAA0BL,SAA1B;AACD;AACF;AA/JuE;AAAA;AAAA,aAiKxE,wBAAea,OAAf,EAA6B;AAC3B,YAAMC,WAAW,mCAAQ,KAAKpE,KAAb,GAAuBmE,OAAvB,CAAjB;;AACA,YAAMb,SAAS,GAAGvD,YAAY,CAC5BoC,cAAc,GAAGA,cAAc,CAACiC,WAAD,CAAjB,GAAiCA,WADnB,+BAExBnC,YAFwB,sBAEPG,iBAFO,IAG5BF,MAH4B,CAA9B;AAKA,aAAKyB,oBAAL,CAA0BL,SAA1B;AACD;AAzKuE;AAAA;AAAA,aA2KxE,kBAAS;AACP,YAAIe,mBAAmB,GAAG,KAAK1F,qBAA/B;AADO,0BAUqB,KAAKqB,KAV1B;AAAA,YAQLyC,cARK,eAQLA,cARK;AAAA,YASL9D,qBATK,eASLA,qBATK;;AAWP,YAAI8D,cAAc,IAAI,OAAOA,cAAP,KAA0B,UAAhD,EAA4D;AAI1D,cAAI9D,qBAAJ,EAA2B;AACzB,kBAAM,IAAImF,KAAJ,CACJ,yEADI,CAAN;AAGD;;AACDO,UAAAA,mBAAmB,GAAG5B,cAAtB;AACD,SAVD,MAUO;AACL,cACE9D,qBAAqB,IACrB,OAAOA,qBAAP,KAAiC,UAFnC,EAGE;AACA,kBAAM,IAAImF,KAAJ,CACJ,yEADI,CAAN;AAGD;AACF;;AAED,YAAIQ,wBAAwB,GAAG,KAAKzF,2BAApC;AAhCO,2BAyC2B,KAAKmB,KAzChC;AAAA,YAuCL0C,oBAvCK,gBAuCLA,oBAvCK;AAAA,YAwCL7D,2BAxCK,gBAwCLA,2BAxCK;;AA0CP,YAAI6D,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,UAA5D,EAAwE;AAItE,cAAI7D,2BAAJ,EAAiC;AAC/B,kBAAM,IAAIiF,KAAJ,CACJ,yEADI,CAAN;AAGD;;AACDQ,UAAAA,wBAAwB,GAAG5B,oBAA3B;AACD,SAVD,MAUO;AACL,cACE7D,2BAA2B,IAC3B,OAAOA,2BAAP,KAAuC,UAFzC,EAGE;AACA,kBAAM,IAAIiF,KAAJ,CACJ,yEADI,CAAN;AAGD;AACF;;AACD,YAAMS,MAAM,GAAG;AACb5F,UAAAA,qBAAqB,EAAE0F,mBADV;AAEbxF,UAAAA,2BAA2B,EAAEyF;AAFhB,SAAf;AAKA,aAAKZ,QAAL,CAAc1C,OAAd,GAAwBuD,MAAxB;AAEA,YAAMvB,KAAU,GAAGjF,KAAK,CAACkF,QAAN,CAAeC,IAAf,CAAoB,KAAKlD,KAAL,CAAWmD,QAA/B,CAAnB;AACA,YAAIqB,aAAa,GAAGxB,KAAK,CAAChD,KAAN,CAAYmD,QAAhC;;AACA,YACEsB,SAAS,CAACC,kBAAV,IACA1B,KAAK,CAAC2B,IADN,KAEC3B,KAAK,CAAC2B,IAAN,KAAe,wBAAf,IACC3B,KAAK,CAAC2B,IAAN,CAAW/E,IAAX,KAAoB,MADrB,IAECoD,KAAK,CAAC2B,IAAN,CAAWC,WAAX,KAA2B,MAJ7B,CADF,EAME;AACAJ,UAAAA,aAAa,GAAGzG,KAAK,CAACkF,QAAN,CAAe4B,OAAf,CAAuBL,aAAvB,CAAhB;AACAA,UAAAA,aAAa,CAACM,IAAd,CACEL,SAAS,CAACM,eAAV,CAA0B;AACxBC,YAAAA,KAAK,EAAE,mBADiB;AAExBC,YAAAA,OAAO,EAAEjC,KAAK,CAAChD,KAAN,CAAYiF;AAFG,WAA1B,CADF;AAMD;;AAED,eAAOlH,KAAK,CAACmH,YAAN,CACLlC,KADK;AAGHI,UAAAA,GAAG,EAAE,KAAKN,UAHP;AAIHqC,UAAAA,WAAW,EAAE;AAJV,WAKAZ,MALA,GAOLC,aAPK,CAAP;AASD;AA3QuE;;AAAA;AAAA,IACpDzG,KAAK,CAACqH,SAD8C;;AACpE/C,EAAAA,OADoE,CAEjEuC,WAFiE,GAEnDhF,IAFmD;AA6Q1E,SAAOyC,OAAP;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = {\n    ...UIManager.getConstants().genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}