{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    this.isGestureRunning = false;\n    this.view = null;\n    this.hasGestureFailed = false;\n    this.hammer = null;\n    this.initialRotation = null;\n    this.config = {};\n    this.previousState = State.UNDETERMINED;\n    this.pendingGestures = {};\n    this.oldState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    };\n\n    this.isPointInView = function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    };\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = _objectWithoutProperties(_ref2, [\"enabled\"]);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = _slicedToArray(argMapping[index], 2),\n                  key = _argMapping$index[0],\n                  value = _argMapping$index[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n      var handlerTag = _ref6.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["/Users/CYH/JS/react_native/Shop APP/node_modules/react-native-gesture-handler/src/web/GestureHandler.ts"],"names":["Hammer","State","EventMap","NodeManager","gestureInstances","GestureHandler","isGestureRunning","view","hasGestureFailed","hammer","initialRotation","config","previousState","UNDETERMINED","pendingGestures","oldState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","state","sync","get","name","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","Error","_gesture","_config","_recognizer","_event","props","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","type","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","getState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","INPUT_CANCEL","isFinal","onGestureEnded","isFirst","findNodeHandle","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}