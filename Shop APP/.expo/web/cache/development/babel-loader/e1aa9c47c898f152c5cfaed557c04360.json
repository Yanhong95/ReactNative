{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/CYH/JS/react_native/Shop APP/App.js\";\nimport React, { useState } from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport productsReducer from \"./store/reducers/products\";\nimport cartReducer from \"./store/reducers/cart\";\nimport ordersReducer from \"./store/reducers/orders\";\nimport ShopNavigator from \"./navigation/ShopNavigator\";\nvar rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer\n});\nvar store = createStore(rootReducer);\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  if (!fontLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        setFontLoaded(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(ShopNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/CYH/JS/react_native/Shop APP/App.js"],"names":["React","useState","createStore","combineReducers","Provider","AppLoading","Font","productsReducer","cartReducer","ordersReducer","ShopNavigator","rootReducer","products","cart","orders","store","fetchFonts","loadAsync","require","App","fontLoaded","setFontLoaded"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,eAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AAEA,IAAMC,WAAW,GAAGR,eAAe,CAAC;AAClCS,EAAAA,QAAQ,EAAEL,eADwB;AAElCM,EAAAA,IAAI,EAAEL,WAF4B;AAGlCM,EAAAA,MAAM,EAAEL;AAH0B,CAAD,CAAnC;AAMA,IAAMM,KAAK,GAAGb,WAAW,CAACS,WAAD,CAAzB;;AAEA,IAAMK,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOV,IAAI,CAACW,SAAL,CAAe;AACpB,iBAAaC,OAAO,uCADA;AAEpB,sBAAkBA,OAAO;AAFL,GAAf,CAAP;AAID,CALD;;AAOA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACQlB,QAAQ,CAAC,KAAD,CADhB;AAAA;AAAA,MACrBmB,UADqB;AAAA,MACTC,aADS;;AAG5B,MAAI,CAACD,UAAL,EAAiB;AACf,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEJ,UADd;AAEE,MAAA,QAAQ,EAAE,oBAAM;AACdK,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AACD,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { useState } from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\n\nimport productsReducer from './store/reducers/products';\nimport cartReducer from './store/reducers/cart';\nimport ordersReducer from './store/reducers/orders';\nimport ShopNavigator from './navigation/ShopNavigator';\n\nconst rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer\n});\n\nconst store = createStore(rootReducer);\n\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf')\n  });\n};\n\nexport default function App() {\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!fontLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => {\n          setFontLoaded(true);\n        }}\n      />\n    );\n  }\n  return (\n    <Provider store={store}>\n      <ShopNavigator />\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}