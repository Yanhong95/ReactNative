{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._shouldFireEndEvent = null;\n\n    _this.onSuccessfulTap = function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    };\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["/Users/CYH/JS/react_native/Shop APP/node_modules/react-native-gesture-handler/src/web/TapGestureHandler.ts"],"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","_shouldFireEndEvent","onSuccessfulTap","ev","_getPendingGestures","length","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","Tap","config","maxDelayMs","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","event","taps","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","_gesture"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}