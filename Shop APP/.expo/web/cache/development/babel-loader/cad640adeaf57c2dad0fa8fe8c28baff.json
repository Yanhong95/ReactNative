{"ast":null,"code":"import { Direction } from \"./web/constants\";\nimport FlingGestureHandler from \"./web/FlingGestureHandler\";\nimport LongPressGestureHandler from \"./web/LongPressGestureHandler\";\nimport NativeViewGestureHandler from \"./web/NativeViewGestureHandler\";\nimport * as NodeManager from \"./web/NodeManager\";\nimport PanGestureHandler from \"./web/PanGestureHandler\";\nimport PinchGestureHandler from \"./web/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/RotationGestureHandler\";\nimport TapGestureHandler from \"./web/TapGestureHandler\";\nexport var Gestures = {\n  PanGestureHandler: PanGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  FlingGestureHandler: FlingGestureHandler\n};\nexport default {\n  Direction: Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};","map":{"version":3,"sources":["/Users/CYH/JS/react_native/Shop APP/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.web.ts"],"names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,SAASA,SAAT;AACA,OAAOC,mBAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,wBAAP;AACA,OAAO,KAAKC,WAAZ;AACA,OAAOC,iBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,iBAAP;AAEA,OAAO,IAAMC,QAAQ,GAAG;AACtBJ,EAAAA,iBAAiB,EAAjBA,iBADsB;AAEtBE,EAAAA,sBAAsB,EAAtBA,sBAFsB;AAGtBD,EAAAA,mBAAmB,EAAnBA,mBAHsB;AAItBE,EAAAA,iBAAiB,EAAjBA,iBAJsB;AAKtBL,EAAAA,wBAAwB,EAAxBA,wBALsB;AAMtBD,EAAAA,uBAAuB,EAAvBA,uBANsB;AAOtBD,EAAAA,mBAAmB,EAAnBA;AAPsB,CAAjB;AAWP,eAAe;AACbD,EAAAA,SAAS,EAATA,SADa;AAEbU,EAAAA,oBAFa,gCAEQC,GAFR,EAEqBC,oBAFrB,EAEoD;AAC/DC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;AACD,GAJY;AAKbG,EAAAA,sBALa,oCAKY;AACvBF,IAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACD,GAPY;AAQbE,EAAAA,oBARa,gCASXC,WATW,EAUXC,UAVW,EAWXC,MAXW,EAYX;AAEA,QAAI,EAAEF,WAAW,IAAIR,QAAjB,CAAJ,EACE,MAAM,IAAIW,KAAJ,oCAC6BH,WAD7B,+BAAN;AAGF,QAAMI,YAAY,GAAGZ,QAAQ,CAACQ,WAAD,CAA7B;AACAb,IAAAA,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;AACA,SAAKC,oBAAL,CAA0BJ,UAA1B,EAAsCC,MAAtC;AACD,GArBY;AAsBbI,EAAAA,oBAtBa,gCAuBXL,UAvBW,EAwBXM,OAxBW,EAyBXC,QAzBW,EA0BX;AACArB,IAAAA,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCS,OAAnC,CAA2CH,OAA3C,EAAoDC,QAApD;AACD,GA5BY;AA6BbH,EAAAA,oBA7Ba,gCA6BQJ,UA7BR,EA6B4BU,SA7B5B,EA6B4C;AACvDxB,IAAAA,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCW,mBAAnC,CAAuDD,SAAvD;AACD,GA/BY;AAgCbE,EAAAA,qBAhCa,iCAgCSZ,UAhCT,EAgC6B;AACxC,WAAOd,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,CAAP;AACD,GAlCY;AAmCba,EAAAA,kBAnCa,8BAmCMb,UAnCN,EAmC0B;AACrCd,IAAAA,WAAW,CAAC2B,kBAAZ,CAA+Bb,UAA/B;AACD;AArCY,CAAf","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}